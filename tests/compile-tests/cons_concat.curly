module Main
import IO::Term

type ListItem = Char | ((ListItem -> ListItem -> ListItem) -> ListItem)
type List = (ListItem -> ListItem -> ListItem) -> ListItem

cons x: ListItem, y: ListItem, f: ListItem -> ListItem -> ListItem = f x y
truefn x: ListItem, y: ListItem = x
falsefn x: ListItem, y: ListItem = y
car list: ListItem =
    match list
    to l: List => l truefn
cdr list: ListItem =
    match list
    to l: List => l falsefn

flag = cons 'f' (cons 'l' (cons 'a' (cons 'g' '0')))
exc = cons '\'' (cons '\'' (cons '.' '0'))

_string_isutf8startchar x: ListItem = match x 
    to x: Int => if (x < 128) or (x >= 191) then 1 else 0

string_len str: ListItem = match str
    to str: List => string_len (cdr str) + _string_isutf8startchar (car str)
    to Int => 0

concat a: ListItem, b: ListItem = match a
    to a: List => cons (car a) (concat (cdr a) b)
    to Int => b : ListItem

_map_item f: Int -> Int, item: ListItem = match item
    to item: Int => f item

map f: Int -> Int, list: ListItem = match list
    to list: List => cons (_map_item f (car list)) (map f (cdr list))
    to list: Int => list

_print_char item: ListItem = match item
    to item: Int => putch item

print str: ListItem = match str
    to str: List => let _ = _print_char (car str)
        in print (cdr str)
    to Int => 0

main = print (concat flag exc)
