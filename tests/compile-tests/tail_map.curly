type ListItem = Int | ((ListItem -> ListItem -> ListItem) -> ListItem)
type List = (ListItem -> ListItem -> ListItem) -> ListItem

cons x: ListItem, y: ListItem, f: ListItem -> ListItem -> ListItem = f x y
truefn x: ListItem, y: ListItem = x
falsefn x: ListItem, y: ListItem = y
car list: ListItem =
	match list
	to list: List => list truefn
cdr list: ListItem =
	match list
	to list: List => list falsefn

putList list: ListItem =
    match list
    to list: List =>
        with _ = debug (car list),
            putList (cdr list)
    to Int => 0

reverse_tail acc: ListItem, list: ListItem =
    match list
    to l: List => reverse_tail (cons (car l) acc) (cdr l)
    to Int => acc
reverse list: ListItem = reverse_tail (cons (car list) 0) (cdr list)

map_tail acc: ListItem, f: Int -> Int, list: ListItem =
    match list
    to l: List => map_tail (cons (match car l to i: Int => debug (f i)) acc) f (cdr l)
    to Int => acc

map f: Int -> Int, list: ListItem = reverse (map_tail 0 f list)

list = cons 1 (cons 2 (cons 3 0))
putList list
putList (reverse list)
putList (map (lambda x: Int = x) list)

