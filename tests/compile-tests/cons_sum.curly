module Main

type ListItem = Int | ((ListItem -> ListItem -> ListItem) -> ListItem)
type List = (ListItem -> ListItem -> ListItem) -> ListItem

cons x: ListItem, y: ListItem, f: ListItem -> ListItem -> ListItem = f x y
truefn x: ListItem, y: ListItem = x
falsefn x: ListItem, y: ListItem = y
car list: ListItem =
	match list
	to list: List => list truefn
cdr list: ListItem =
	match list
	to list: List => list falsefn

list = cons 1 (cons 2 3)

concat a: ListItem, b: ListItem = match a
    to a: List => cons (car a) (concat (cdr a) b)
    to Int => b : ListItem

_map_item f: Int -> Int, item: ListItem = match item
    to x: Int => f x

map f: Int -> Int, list: ListItem = match list
    to list: List => cons (_map_item f (car list)) (map f (cdr list))
    to x: Int => x

main =
    let _ = debug (car list)
        _ = debug (cdr list)
        _ = debug (car (cdr list))
        _ = debug (cdr (cdr list))
        _ = debug (car (map (lambda x: Int = x+2) (cons 2 0)))
    in 0

